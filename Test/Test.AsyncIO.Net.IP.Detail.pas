unit Test.AsyncIO.Net.IP.Detail;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, AsyncIO.Net.IP.Detail, AsyncIO.Net.IP, AsyncIO.Detail, AsyncIO, NetTestCase;

type
  // Test methods for class AsyncSocketStreamImpl

  TestAsyncSocketStreamImpl = class(TNetTestCase)
  strict private
    FService: IOService;
    FSocket: IPStreamSocket;
    FAsyncSocketStreamImpl: AsyncSocketStream;
    FHandlerExecuted: boolean;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetSocket;
    procedure TestAsyncReadSome;
    procedure TestAsyncWriteSome;
  end;

implementation

uses
  IPStreamSocketMock, AsyncIO.ErrorCodes;

procedure TestAsyncSocketStreamImpl.SetUp;
begin
  FService := NewIOService;
  FSocket := TIPStreamSocketMock.Create(FService);

  FSocket.Bind(Endpoint(IPAddressFamily.v4, 0));
  FSocket.Connect(Endpoint(IPv4Address.Loopback, 54321));

  FAsyncSocketStreamImpl := NewAsyncSocketStream(FSocket);

  FHandlerExecuted := False;
end;

procedure TestAsyncSocketStreamImpl.TearDown;
begin
  FAsyncSocketStreamImpl := nil;
  FSocket := nil;
  FService := nil;
end;

procedure TestAsyncSocketStreamImpl.TestGetSocket;
var
  ReturnValue: IPStreamSocket;
begin
  ReturnValue := FAsyncSocketStreamImpl.GetSocket;

  CheckSame(FSocket, ReturnValue);
end;

procedure TestAsyncSocketStreamImpl.TestAsyncReadSome;
var
  Handler: IOHandler;
  Buffer: MemoryBuffer;
  data: TArray<Byte>;
begin
  SetLength(data, 42);
  Buffer := data;

  Handler :=
    procedure(const ErrorCode: IOErrorCode; const BytesTransferred: UInt64)
    begin
      FHandlerExecuted := True;
      CheckFalse(ErrorCode, 'Error: ' + ErrorCode.Message);
      CheckEquals(42, BytesTransferred, 'BytesTransferred incorrect');
    end;

  FAsyncSocketStreamImpl.AsyncReadSome(Buffer, Handler);

  FService.Poll;

  CheckTrue(FHandlerExecuted, 'Handler failed to execute');
end;

procedure TestAsyncSocketStreamImpl.TestAsyncWriteSome;
var
  Handler: IOHandler;
  Buffer: MemoryBuffer;
  data: TArray<Byte>;
begin
  SetLength(data, 42);
  Buffer := data;

  Handler :=
    procedure(const ErrorCode: IOErrorCode; const BytesTransferred: UInt64)
    begin
      FHandlerExecuted := True;
      CheckFalse(ErrorCode, 'Error: ' + ErrorCode.Message);
      CheckEquals(42, BytesTransferred, 'BytesTransferred incorrect');
    end;

  FAsyncSocketStreamImpl.AsyncWriteSome(Buffer, Handler);

  FService.Poll;

  CheckTrue(FHandlerExecuted, 'Handler failed to execute');
end;


initialization
  // Register any test cases with the test runner
  RegisterTest(TestAsyncSocketStreamImpl.Suite);
end.

