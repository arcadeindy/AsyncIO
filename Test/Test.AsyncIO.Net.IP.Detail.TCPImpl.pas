unit Test.AsyncIO.Net.IP.Detail.TCPImpl;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, AsyncIO.Net.IP.Detail.TCPImpl, AsyncIO.Net.IP, IdWinsock2, AsyncIO, NetTestCase, EchoTestServer;

type
  // Test methods for class TTCPSocketImpl

  TestTTCPSocketImpl = class(TNetTestCase)
  strict private
    FTestServer: IEchoTestServer;
    FService: IOService;
    FTCPSocketImpl: IPStreamSocket;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetService;
    procedure TestGetProtocol;
    procedure TestGetProtocolIPv4;
    procedure TestGetProtocolIPv6;
    procedure TestGetLocalEndpoint;
    procedure TestGetRemoteEndpoint;
    procedure TestGetSocketHandle;
    procedure TestAsyncConnect;
    procedure TestBind;
    procedure TestConnect;
    procedure TestClose;
    procedure TestShutdown;
    procedure TestAsyncSend;
    procedure TestAsyncReceive;
  end;

implementation

uses
  System.SysUtils;

procedure TestTTCPSocketImpl.SetUp;
begin
  FTestServer := NewEchoTestServer(7);
  FService := NewIOService();
  FTCPSocketImpl := NewTCPSocket(FService);
end;

procedure TestTTCPSocketImpl.TearDown;
begin
  FTCPSocketImpl := nil;
  FService := nil;
  FTestServer := nil;
end;

procedure TestTTCPSocketImpl.TestGetService;
var
  ReturnValue: IOService;
begin
  ReturnValue := FTCPSocketImpl.GetService;
  CheckSame(FService, ReturnValue);
end;

procedure TestTTCPSocketImpl.TestGetSocketHandle;
begin
  // TODO
end;

procedure TestTTCPSocketImpl.TestGetProtocol;
var
  ReturnValue: IPProtocol;
begin
  ReturnValue := FTCPSocketImpl.GetProtocol;

  CheckEquals(IPProtocol.TCP.Unspecified, ReturnValue);
end;

procedure TestTTCPSocketImpl.TestGetProtocolIPv4;
var
  ReturnValue: IPProtocol;
begin
  FTCPSocketImpl.Bind(Endpoint(IPAddressFamily.v4, 0));

  ReturnValue := FTCPSocketImpl.GetProtocol;

  CheckEquals(IPProtocol.TCP.v4, ReturnValue);
end;

procedure TestTTCPSocketImpl.TestGetProtocolIPv6;
var
  ReturnValue: IPProtocol;
begin
  FTCPSocketImpl.Bind(Endpoint(IPAddressFamily.v6, 0));

  ReturnValue := FTCPSocketImpl.GetProtocol;

  CheckEquals(IPProtocol.TCP.v6, ReturnValue);
end;

procedure TestTTCPSocketImpl.TestGetLocalEndpoint;
var
  ReturnValue: IPEndpoint;
begin
  StartExpectingException(EOSError);

  ReturnValue := FTCPSocketImpl.GetLocalEndpoint;

  StopExpectingException('Failed to raise OS error for unbound socket');

  FTCPSocketImpl.Bind(Endpoint(IPv4Address.Loopback, 0));

  ReturnValue := FTCPSocketImpl.GetLocalEndpoint;

  CheckEquals(IPv4Address.Loopback, ReturnValue.Address, 'Failed to get local endpoint');
end;

procedure TestTTCPSocketImpl.TestGetRemoteEndpoint;
var
  ServerEndpoint: IPEndpoint;
  ReturnValue: IPEndpoint;
begin
  FTestServer.Start;

  ServerEndpoint := Endpoint(IPv4Address.Loopback, FTestServer.Port);

  FTCPSocketImpl.Connect(ServerEndpoint);

  ReturnValue := FTCPSocketImpl.GetRemoteEndpoint;

  CheckEquals(ServerEndpoint, ReturnValue);
end;

procedure TestTTCPSocketImpl.TestAsyncConnect;
var
  Handler: OpHandler;
  PeerEndpoint: IPEndpoint;
begin
  // TODO: Setup method call parameters
//  FTCPSocketImpl.AsyncConnect(PeerEndpoint, Handler);
  // TODO: Validate method results
end;

procedure TestTTCPSocketImpl.TestBind;
var
  LocalEndpoint: IPEndpoint;
begin
  // TODO: Setup method call parameters
//  FTCPSocketImpl.Bind(LocalEndpoint);
  // TODO: Validate method results
end;

procedure TestTTCPSocketImpl.TestConnect;
var
  PeerEndpoint: IPEndpoint;
begin
  // TODO: Setup method call parameters
//  FTCPSocketImpl.Connect(PeerEndpoint);
  // TODO: Validate method results
end;

procedure TestTTCPSocketImpl.TestClose;
begin
//  FTCPSocketImpl.Close;
  // TODO: Validate method results
end;

procedure TestTTCPSocketImpl.TestShutdown;
var
  ShutdownFlag: SocketShutdownFlag;
begin
  // TODO: Setup method call parameters
//  FTCPSocketImpl.Shutdown(ShutdownFlag);
  // TODO: Validate method results
end;

procedure TestTTCPSocketImpl.TestAsyncSend;
var
  Handler: IOHandler;
  Buffer: MemoryBuffer;
begin
  // TODO: Setup method call parameters
//  FTCPSocketImpl.AsyncSend(Buffer, Handler);
  // TODO: Validate method results
end;

procedure TestTTCPSocketImpl.TestAsyncReceive;
var
  Handler: IOHandler;
  Buffer: MemoryBuffer;
begin
  // TODO: Setup method call parameters
//  FTCPSocketImpl.AsyncReceive(Buffer, Handler);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTTCPSocketImpl.Suite);
end.

